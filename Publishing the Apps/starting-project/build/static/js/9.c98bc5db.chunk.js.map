{"version":3,"sources":["components/ImagePicker.tsx","pages/NewMemory.tsx"],"names":["Camera","Plugins","ImagePicker","props","useState","takenPhoto","setTakenPhoto","filePickerRef","useRef","openFilePicker","current","click","takePhotoHandler","a","Capacitor","isPluginAvailable","getPhoto","resultType","CameraResultType","Uri","source","CameraSource","quality","width","photo","webPath","pickedPhoto","path","preview","onImagePick","Fragment","className","src","alt","fill","onClick","icon","camera","slot","type","hidden","ref","onChange","event","file","target","files","fr","FileReader","onload","undefined","result","toString","readAsDataURL","NewMemory","chosenMemoryType","setChosenMemoryType","memoriesCtx","useContext","MemoriesContext","titleRef","history","useHistory","addMemoryHandler","enteredTitle","value","trim","length","addMemory","goBack","replace","defaultHref","position","onIonChange","selectedMemoryType","detail"],"mappings":"0OAiBQA,G,OAAWC,IAAXD,QA2EOE,EAtEV,SAAAC,GACD,MAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAgBC,iBAAyB,MAGzCC,EAAiB,WACnBF,EAAcG,QAASC,SAkBrBC,EAAgB,uCAAG,8BAAAC,EAAA,yDAChBC,IAAUC,kBAAkB,UADZ,uBAEjBN,IAFiB,mDAMGT,EAAOgB,SAAS,CAChCC,WAAYC,IAAiBC,IAC7BC,OAAQC,IAAarB,OACrBsB,QAAS,GACTC,MAAO,MAVM,WAMXC,EANW,SAaFA,EAAMC,QAbJ,iDAgBXC,EAAqB,CACvBC,KAAMH,EAAMG,KACZC,QAASJ,EAAMC,SAEnBnB,EAAcoB,GACdvB,EAAM0B,YAAYH,GArBD,kDAuBjBjB,IAvBiB,0DAAH,qDA4BtB,OACI,kBAAC,IAAMqB,SAAP,KACI,yBAAKC,UAAU,kBACT1B,GAAc,gDACfA,GAAc,yBAAK2B,IAAK3B,EAAWuB,QAASK,IAAI,aAErD,kBAAC,IAAD,CAAWC,KAAK,QAAQC,QAASvB,GAC7B,kBAAC,IAAD,CAASwB,KAAMC,IAAQC,KAAK,UAC5B,kBAAC,IAAD,oBAEJ,2BAAOC,KAAK,OAAOC,QAAM,EAACC,IAAKlC,EAC3BmC,SAtDY,SAACC,GACrB,IAAMC,EAAOD,EAAME,OAAQC,MAAO,GAC5BC,EAAK,IAAIC,WACfD,EAAGE,OAAS,WACR,IAAMzB,EAAe,CACjBG,UAAMuB,EACNtB,QAASmB,EAAGI,OAAQC,YAExB9C,EAAckB,GACdrB,EAAM0B,YAAYL,IAEtBuB,EAAGM,cAAcT,QCsEVU,UAvFa,WAE1B,MAAoClD,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAgDF,mBAC9C,QADF,mBAAOmD,EAAP,KAAyBC,EAAzB,KAIMC,EAAcC,qBAAWC,KAEzBC,EAAWpD,iBAA4B,MAEvCqD,EAAUC,cAYVC,EAAgB,uCAAG,8BAAAlD,EAAA,0DACjBmD,EADiB,UACFJ,EAASlD,eADP,aACF,EAAkBuD,QAIK,IAA1CD,EAAaZ,WAAWc,OAAOC,QAC9B9D,GACAkD,EAPoB,iDAYvBE,EAAYW,UAAU/D,EAAY2D,EAAaZ,WAAYG,GAC3DM,EAAQM,OAAS,EAAIN,EAAQQ,SAAWR,EAAQS,QAAQ,kBAbjC,2CAAH,qDAgBtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYhC,KAAK,SACf,kBAAC,IAAD,CAAeiC,YAAY,oBAE7B,kBAAC,IAAD,yBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,SAAS,YAAnB,gBACA,kBAAC,IAAD,CAAUjC,KAAK,OAAOE,IAAKmB,OAIjC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,YA7CkB,SAAC9B,GAC/B,IAAM+B,EAAqB/B,EAAMgC,OAAOV,MACxCT,EAAoBkB,IA4CRT,MAAOV,GAEP,kBAAC,IAAD,CAAiBU,MAAM,QAAvB,eACA,kBAAC,IAAD,CAAiBA,MAAM,OAAvB,iBAIN,kBAAC,IAAD,CAAQlC,UAAU,mBAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAaF,YA3DA,SAACL,GACxBlB,EAAckB,QA6DR,kBAAC,IAAD,CAAQO,UAAU,kBAChB,kBAAC,IAAD,CAAQA,UAAU,mBAChB,kBAAC,IAAD,CAAWI,QAAS4B,GAApB","file":"static/js/9.c98bc5db.chunk.js","sourcesContent":["import { IonButton, IonIcon, IonLabel } from '@ionic/react';\r\nimport { camera } from 'ionicons/icons';\r\nimport React, { useState, useRef } from 'react';\r\nimport {\r\n    Plugins,\r\n    CameraResultType,\r\n    CameraSource,\r\n    Capacitor\r\n} from '@capacitor/core';\r\n\r\nimport './ImagePicker.css';\r\n\r\nexport interface Photo {\r\n    path: string | undefined;\r\n    preview: string;\r\n}\r\n\r\nconst { Camera } = Plugins;\r\n\r\n\r\nconst ImagePicker: React.FC<{\r\n    onImagePick: (photo: Photo) => void\r\n}> = props => {\r\n    const [takenPhoto, setTakenPhoto] = useState<Photo>();\r\n\r\n    const filePickerRef = useRef<HTMLInputElement>(null);\r\n\r\n\r\n    const openFilePicker = () => {\r\n        filePickerRef.current!.click();\r\n    }\r\n\r\n    const pickFileHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target!.files![0];\r\n        const fr = new FileReader();\r\n        fr.onload = () => {\r\n            const photo: Photo = {\r\n                path: undefined,\r\n                preview: fr.result!.toString()\r\n            };\r\n            setTakenPhoto(photo);\r\n            props.onImagePick(photo);\r\n        }\r\n        fr.readAsDataURL(file);\r\n\r\n    }\r\n\r\n    const takePhotoHandler = async () => {\r\n        if (!Capacitor.isPluginAvailable('Camera')) {\r\n            openFilePicker();\r\n            return;\r\n        }\r\n        try {\r\n            const photo = await Camera.getPhoto({\r\n                resultType: CameraResultType.Uri,\r\n                source: CameraSource.Camera,\r\n                quality: 80,\r\n                width: 500\r\n            });\r\n\r\n            if (!photo || !photo.webPath) {\r\n                return;\r\n            }\r\n            const pickedPhoto: Photo = {\r\n                path: photo.path,\r\n                preview: photo.webPath\r\n            }\r\n            setTakenPhoto(pickedPhoto);\r\n            props.onImagePick(pickedPhoto);\r\n        } catch (error) {\r\n            openFilePicker();\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"image-preview\">\r\n                {!takenPhoto && <h3>No photo chosen.</h3>}\r\n                {takenPhoto && <img src={takenPhoto.preview} alt=\"Preview\" />}\r\n            </div>\r\n            <IonButton fill=\"clear\" onClick={takePhotoHandler}>\r\n                <IonIcon icon={camera} slot=\"start\"></IonIcon>\r\n                <IonLabel>Take Photo</IonLabel>\r\n            </IonButton>\r\n            <input type=\"file\" hidden ref={filePickerRef}\r\n                onChange={pickFileHandler}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ImagePicker;","import React, { useState, useRef, useContext } from 'react';\nimport {\n  IonPage,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonButtons,\n  IonBackButton,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonButton,\n  IonSelect,\n  IonSelectOption\n} from '@ionic/react';\n\nimport { useHistory } from 'react-router-dom';\n\nimport MemoriesContext, { MemoryType } from '../data/memories-context';\nimport ImagePicker, { Photo } from '../components/ImagePicker';\n\n\nconst NewMemory: React.FC = () => {\n\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\n\n  const [chosenMemoryType, setChosenMemoryType] = useState<MemoryType>(\n    'good'\n  );\n\n  const memoriesCtx = useContext(MemoriesContext);\n\n  const titleRef = useRef<HTMLIonInputElement>(null);\n\n  const history = useHistory();\n\n  const photoPickHandler = (photo: Photo) => {\n    setTakenPhoto(photo)\n  }\n\n  const selectMemoryTypeHandler = (event: CustomEvent) => {\n    const selectedMemoryType = event.detail.value;\n    setChosenMemoryType(selectedMemoryType);\n  };\n\n\n  const addMemoryHandler = async () => {\n    const enteredTitle = titleRef.current?.value;\n\n    if (\n      !enteredTitle ||\n      enteredTitle.toString().trim().length === 0 ||\n      !takenPhoto ||\n      !chosenMemoryType\n    ) {\n      return;\n    }\n\n    memoriesCtx.addMemory(takenPhoto, enteredTitle.toString(), chosenMemoryType);\n    history.length > 0 ? history.goBack() : history.replace('/good-memories');\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/good-memories\" />\n          </IonButtons>\n          <IonTitle>Add New Memory</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem>\n                <IonLabel position=\"floating\">Memory Title</IonLabel>\n                <IonInput type=\"text\" ref={titleRef}></IonInput>\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonSelect\n                onIonChange={selectMemoryTypeHandler}\n                value={chosenMemoryType}\n              >\n                <IonSelectOption value=\"good\">Good Memory</IonSelectOption>\n                <IonSelectOption value=\"bad\">Bad Memory</IonSelectOption>\n              </IonSelect>\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-text-center\">\n            <IonCol>\n              <ImagePicker onImagePick={photoPickHandler} />\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-margin-top\">\n            <IonCol className=\"ion-text-center\">\n              <IonButton onClick={addMemoryHandler}>Add Memory</IonButton>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default NewMemory;\n"],"sourceRoot":""}